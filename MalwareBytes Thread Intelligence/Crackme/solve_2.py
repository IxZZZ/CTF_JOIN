from z3 import *

v34_pre = [0xF158955A, 0xB5626D7C, 0xD68AC6C2,
           0x10F6F220, 0x4CEF8FD8, 0x8B4663D6, 0xA2BE0D1A, 81]

v34 = []
for a in v34_pre:
    while a:
        v34.append(a & 0xff)
        a = a >> 8

print(v34)
for len_input in range(1, 30):
    try:
        input = [BitVec(f'input_{i}', 8) for i in range(len_input)]

        v8 = [i for i in range(0x100)]
        for i in range(256):
            v10 = v8[i]
            v6 = v10 + input[i % len_input]

            temp = v8[i-1]

            k = 0
            for _ in range(256):
                if k == v6:
                    break
                k += 1
            v8[i-1] = v8[k & 0xff]
            v8[k&0xff] = temp

        v13 = 0

        res = []
        for v9 in range(0x1d):
            v14 = v9 + 1
            v15 = v8[v14]
            v13 += v15
            v13 &= 0xff

            v17 = v8[v13]
            v8[v14] = v17
            v8[v13] = v15

            res.append(v8[(v15+v17) & 0xff] ^ v34[v9])

        S = Solver()

        for i in range(len(input)):
            S.add(input[i] >= 32, input[i] <= 127)
            S.add(Or(And(res[i] >= 32, res[i] != 127),
                  res[i] == 10, res[i] == 13))

        assert sat == S.check()

        ans = S.model()
        print(len_input, ' - ', end='')
        print(ans)
        for n in input:
            print(chr(ans[n].as_long()), end='')
        print()
    except Exception as e:
        print(e)
        continue

print('ok')
