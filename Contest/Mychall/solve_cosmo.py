from z3 import *


def cal(str, rdi):
    v6 = rdi & 0xffff
    v5 = (rdi & 0xffffffff) >> 16
    v6 = v6 + str[0]
    v5 = v5 + v6

    v6 = v6 + str[1]
    v5 = v5 + v6
    v6 = v6 % 0xfff1
    v5 = v5 % 0xfff1

    res = v6 | (v5 << 16)
    return res


arr = [21233875, 69468586, 146735755, 251265871, 379651085, 536872170, 719455639, 924911196, 1158088491, 1412368333, 1695680674, 2005272944, 2341407284, 2698316511, 3076262773, 3483634782, 3913551105, 72486322, 548474478, 0, 140709747116256, 140709747202416,
       140709747116896, 140709747089568, 140709747117248, 140709747095216, 140709747094464, 140709747118832, 140709747095184, 140709747117408, 140709747117424, 140709747095120, 140709747117488, 140709747117520, 140709747055600, 140709747086480, 140709747206912, 140709747117792]
rdi = 1
for num in arr[:19]:
    # print(num)
    flag = [BitVec(f'flag_{i}', 32) for i in range(2)]

    S = Solver()

    for i in range(len(flag)):
        S.add(flag[i] > 32, flag[i] < 127)

    S.add(cal(flag, rdi) == num)
    rdi = num
    assert sat == S.check()

    ans = S.model()
    for f in flag:
        print(chr(ans[f].as_long()), end='')
